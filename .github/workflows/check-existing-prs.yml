name: Check Existing PRs

on:
  workflow_dispatch:
    inputs:
      process_type:
        description: 'Select process type'
        required: true
        default: 'check_balance'
        type: choice
        options:
        - check_balance
        - send_tokens

jobs:
  process-prs:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: '16'

      - name: Install dependencies
        run: npm install axios

      - name: Process Existing PRs
        uses: actions/github-script@v6
        with:
          script: |
            const axios = require('axios');
            
            async function checkBalance(btcAddress) {
              console.log(`\nüîç Checking balance for BTC address: ${btcAddress}`);
              try {
                const response = await axios.get(`https://mempool.space/signet/api/address/${btcAddress}`);
                const balanceInBTC = response.data.chain_stats.funded_txo_sum / 100000000;
                console.log(`üí∞ Current balance: ${balanceInBTC} BTC`);
                console.log(`‚ú® Required balance: 1 BTC`);
                return balanceInBTC >= 1;
              } catch (error) {
                console.error(`‚ùå Error checking balance: ${error.message}`);
                throw error;
              }
            }

            console.log('üöÄ Starting to process PRs...');
            
            // Get all open PRs
            const prs = await github.rest.pulls.list({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open'
            });

            console.log(`üìã Found ${prs.data.length} open PRs to process`);

            for (const pr of prs.data) {
              console.log(`\nüìå Processing PR #${pr.number} - ${pr.title}`);
              
              const files = await github.rest.pulls.listFiles({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: pr.number
              });

              console.log(`üìÅ Found ${files.data.length} files in PR #${pr.number}`);

              for (const file of files.data) {
                if (file.filename.startsWith('validators/')) {
                  console.log(`\nüìÑ Processing validator file: ${file.filename}`);
                  
                  const response = await github.rest.repos.getContent({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    path: file.filename,
                    ref: pr.head.sha
                  });

                  const content = Buffer.from(response.data.content, 'base64').toString();
                  const validatorData = JSON.parse(content);
                  console.log(`üîë Found BTC address: ${validatorData.btc_address}`);

                  if (context.payload.inputs.process_type === 'check_balance') {
                    // Check BTC balance
                    try {
                      const hasEnoughBalance = await checkBalance(validatorData.btc_address);
                      const statusEmoji = hasEnoughBalance ? '‚úÖ' : '‚ùå';
                      const statusText = hasEnoughBalance ? 'PASSED' : 'FAILED';
                      console.log(`${statusEmoji} Balance check ${statusText} for PR #${pr.number}`);
                      
                      // Add comment to PR
                      const comment = await github.rest.issues.createComment({
                        owner: context.repo.owner,
                        repo: context.repo.repo,
                        issue_number: pr.number,
                        body: hasEnoughBalance 
                          ? `‚úÖ BTC address \`${validatorData.btc_address}\` has sufficient balance\n\n` +
                            `- Current balance: ${balanceInBTC} BTC\n` +
                            `- Required balance: 1 BTC\n` +
                            `- Status: PASSED ‚úÖ`
                          : `‚ùå BTC address \`${validatorData.btc_address}\` has insufficient balance\n\n` +
                            `- Current balance: ${balanceInBTC} BTC\n` +
                            `- Required balance: 1 BTC\n` +
                            `- Status: FAILED ‚ùå`
                      });
                      console.log(`üí¨ Added comment to PR #${pr.number}`);

                      // Add labels
                      const label = hasEnoughBalance ? 'balance-ok' : 'balance-insufficient';
                      await github.rest.issues.addLabels({
                        owner: context.repo.owner,
                        repo: context.repo.repo,
                        issue_number: pr.number,
                        labels: [label]
                      });
                      console.log(`üè∑Ô∏è Added label '${label}' to PR #${pr.number}`);
                    } catch (error) {
                      console.error(`‚ùå Error processing PR #${pr.number}: ${error.message}`);
                      await github.rest.issues.createComment({
                        owner: context.repo.owner,
                        repo: context.repo.repo,
                        issue_number: pr.number,
                        body: `‚ùå Error checking BTC balance: ${error.message}`
                      });
                    }
                  }
                }
              }
            }
            console.log('\n‚ú® Finished processing all PRs');

      - name: Setup Go and Send Tokens
        if: github.event.inputs.process_type == 'send_tokens'
        env:
          FIAMMA_BINARY: fiammad
          CHAIN_ID: fiamma-testnet
          NODE_URL: https://rpc-testnet.fiamma.network:26657
          FAUCET_MNEMONIC: ${{ secrets.FAUCET_MNEMONIC }}
        run: |
          # Setup Go environment
          go install github.com/fiamma/fiamma@latest
          
          # Restore wallet from mnemonic
          echo "$FAUCET_MNEMONIC" | $FIAMMA_BINARY keys add faucet --recover --keyring-backend test

          # Process all validator files
          for file in validators/*.json; do
            if [ -f "$file" ]; then
              FIAMMA_ADDRESS=$(jq -r .fiamma_address "$file")
              
              # Send tokens
              $FIAMMA_BINARY tx bank send \
                faucet \
                $FIAMMA_ADDRESS \
                1000000ufiamma \
                --chain-id $CHAIN_ID \
                --node $NODE_URL \
                --keyring-backend test \
                --yes
              
              echo "Tokens sent to $FIAMMA_ADDRESS"
            fi
          done 